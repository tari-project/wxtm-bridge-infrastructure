AWSTemplateFormatVersion: "2010-09-09"
Description: "Configuration for setting up private subnets and NAT instance. This is required for lambda functions to access resources over public internet connection"
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  RoutingTableCidrBlock:
    Description: Default CIDR block for routing tables.
    Type: String
    Default: "0.0.0.0/0"
  PrivateSubnetCidrBlockA:
    Type: String
  PrivateSubnetCidrBlockB:
    Type: String
  PrivateSubnetCidrBlockC:
    Type: String
  CidrIp:
    Type: String
  PublicSubnet:
    Type: AWS::EC2::Subnet::Id
  KeyName:
    Type: String
    Description: SSH Key name to access the NAT instance
    Default: ""

Mappings:
  NatRegionMap:
    us-east-1:
      AMI: ami-07be03a82adb0889f

Conditions:
  SSHAccess: !Not [!Equals [!Ref KeyName, ""]]

Resources:
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId

  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: !Ref RoutingTableCidrBlock
      InstanceId: !Ref NatInstance

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetA

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetB

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCidrBlockA
      MapPublicIpOnLaunch: false

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCidrBlockB
      MapPublicIpOnLaunch: false

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: !Select [2, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnetCidrBlockC
      MapPublicIpOnLaunch: false

  NatSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group of NAT instance"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref CidrIp
          FromPort: 80
          ToPort: 80
        - IpProtocol: tcp
          CidrIp: !Ref CidrIp
          FromPort: 443
          ToPort: 443
        - !If
          - SSHAccess
          - FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0
            IpProtocol: tcp
          - !Ref "AWS::NoValue"

  NatInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SourceDestCheck: false
      KeyName: !If
        - SSHAccess
        - !Ref KeyName
        - !Ref "AWS::NoValue"
      ImageId:
        Fn::FindInMap:
          - NatRegionMap
          - !Ref AWS::Region
          - AMI
      NetworkInterfaces:
        - GroupSet:
            - !Ref NatSecurityGroup
          AssociatePublicIpAddress: true
          DeviceIndex: "0"
          DeleteOnTermination: true
          SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - "#!/bin/bash"
              - "yum update -y && yum install -y yum-cron && chkconfig yum-cron on"
      Tags:
        - Key: Name
          Value: "NAT instance"

Outputs:
  PrivateSubnets:
    Value: !Sub ${PrivateSubnetA},${PrivateSubnetB},${PrivateSubnetC}
