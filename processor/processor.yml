Transform: AWS::Serverless-2016-10-31
Parameters:
  Environment:
    Type: String
  PublicSubnets:
    Type: String
  VpcId:
    Type: String
  ServiceName:
    Type: String
    Default: "wtxm-bridge-processor"
  MinotariWalletImage:
    Type: AWS::SSM::Parameter::Value<String>
  MinotariWalletImageTag:
    Type: String
  ColdWalletSecret:
    Type: String
  InstanceType:
    Type: String
  TaskCpu:
    Type: String
    Default: "512"
  TaskMemory:
    Type: String
    Default: "512"
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
  NetworkName:
    Type: String
    Default: "esmeralda"
  M2MTokenSecret:
    Type: String
  ProcessorImage:
    Type: AWS::SSM::Parameter::Value<String>
  ProcessorImageTag:
    Type: String
  BackendUrl:
    Type: AWS::SSM::Parameter::Value<String>
  MintLowSafeAddress:
    Type: AWS::SSM::Parameter::Value<String>
  MintHighSafeAddress:
    Type: AWS::SSM::Parameter::Value<String>
  MultiSendSafeAddress:
    Type: AWS::SSM::Parameter::Value<String>
  WxtmAddress:
    Type: AWS::SSM::Parameter::Value<String>
  WxtmControllerAddress:
    Type: AWS::SSM::Parameter::Value<String>
  KmsKeyId:
    Type: AWS::SSM::Parameter::Value<String>
  EthRpcUrl:
    Type: AWS::SSM::Parameter::Value<String>
  OperationMode:
    Type: String
    AllowedValues:
      - proposer
      - finalizer
  SentryDsn:
    Type: AWS::SSM::Parameter::Value<String>

Mappings:
  EC2InstanceConnectMap:
    "eu-north-1":
      SourcePrefixListId: "pl-0bd77a95ba8e317a6"
    "eu-central-1":
      SourcePrefixListId: "pl-03384955215625250"

Resources:
  ProcessorTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
      Policies:
        - PolicyName: KmsKeyAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Sign
                  - kms:Decrypt
                  - kms:GenerateDataKey
                  - kms:GetPublicKey
                Resource: !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsKeyId}
        - PolicyName: SNSAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref ErrorsTopic

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ecr:BatchCheckLayerAvailability
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:GetAuthorizationToken
                  - ec2:DescribeInstanceStatus
                  - ec2:AssociateAddress
                  - logs:CreateLogStream
                  - logs:CreateLogGroup
                  - logs:PutLogEvents
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:AttachVolume
                  - ec2:CreateVolume
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DeleteVolume
                  - ec2:DeleteSnapshot
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstances
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeAttribute
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeSnapshots
                  - ec2:CopySnapshot
                  - ec2:DescribeSnapshotAttribute
                  - ec2:DetachVolume
                  - ec2:ModifySnapshotAttribute
                  - ec2:ModifyVolumeAttribute
                  - ec2:DescribeTags
                Resource: "*"

  WalletDataVolume:
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref "AWS::Region"
      Size: 2
      VolumeType: gp3
      Encrypted: true
      Tags:
        - Key: Name
          Value: !Sub wallet-${OperationMode}

  ECSInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AvailabilityZones:
        - !Select
          - 0
          - Fn::GetAZs: !Ref "AWS::Region"
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSLaunchTemplate
        Version: !GetAtt ECSLaunchTemplate.LatestVersionNumber
      MinSize: "0"
      MaxSize: "1"
      DesiredCapacity: "1"
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
          PropagateAtLaunch: true

  ECSLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref ECSAMI
        InstanceType: !Ref InstanceType
        SecurityGroupIds:
          - !GetAtt ContainerSecurityGroup.GroupId
        IamInstanceProfile:
          Arn: !GetAtt ECSInstanceProfile.Arn
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchTemplate

    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              ecs-init: []
              awslogs: []
              ec2-instance-connect: []
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            02_mount_ebs:
              command: bash -x /home/ec2-user/mount-ebs
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
              awslogsd:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/awslogs/awslogs.conf
                  - /etc/awslogs/awscli.conf
          files:
            "/home/ec2-user/mount-ebs":
              mode: "000400"
              owner: ec2-user
              group: ec2-user
              content: !Sub |
                cd /home/ec2-user
                INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`
                aws ec2 attach-volume --volume-id {{VolumeId}} --instance-id $INSTANCE_ID --device /dev/sdf --region {{Region}}
                DEVICE="/dev/nvme1n1"
                MOUNT_POINT="/home/ec2-user/wallet-data"
                while [ ! -e $DEVICE ]; do sleep 1; done  # Wait for NVMe mapping

                FS_TYPE=ext4

                # Check for existing file system
                EXISTING_FS=$(sudo blkid -o value -s TYPE "$DEVICE" || true)

                if [ -z "$EXISTING_FS" ]; then
                  echo "No file system detected. Creating $FS_TYPE on $DEVICE"
                  mkfs -t "$FS_TYPE" "$DEVICE"
                else
                  echo "Existing $EXISTING_FS file system found. Skipping formatting."
                fi

                mkdir -p $MOUNT_POINT
                mount $DEVICE $MOUNT_POINT
                chown ec2-user:ec2-user $MOUNT_POINT
              context:
                VolumeId: !GetAtt WalletDataVolume.VolumeId
                Region: !Ref AWS::Region
            "/etc/cfn/cfn-hup.conf":
              mode: "000400"
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ECSLaunchTemplate.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
            "/etc/awslogs/awscli.conf":
              content: !Sub |
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                [/var/tari/wallet/${NetworkName}/log/wallet/base_layer.log]
                file = /var/tari/wallet/${NetworkName}/log/wallet/base_layer.log
                log_group_name = ${LogGroup}
                log_stream_name = {instance_id}/var/tari/wallet/${NetworkName}/log/wallet/base_layer.log

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  LogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Retain
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 7

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: ECS Containers Security Group
      SecurityGroupIngress:
        - SourcePrefixListId:
            !FindInMap [
              EC2InstanceConnectMap,
              !Ref AWS::Region,
              SourcePrefixListId,
            ]
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  ErrorsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${OperationMode}-errors-topic"
      DisplayName: !Sub "${OperationMode} error notifications"

  ErrorsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${OperationMode}-errors-queue"
      VisibilityTimeout: 300
      MessageRetentionPeriod: 1209600

  ErrorsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref ErrorsQueue
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt ErrorsQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref ErrorsTopic

  ErrorsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref ErrorsTopic
      Protocol: sqs
      Endpoint: !GetAtt ErrorsQueue.Arn

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      NetworkMode: bridge
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      TaskRoleArn: !GetAtt ProcessorTaskRole.Arn
      ContainerDefinitions:
        - Image: !Sub ${MinotariWalletImage}:${MinotariWalletImageTag}
          Name: minotari-console-wallet
          User: tari
          LinuxParameters:
            InitProcessEnabled: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: minotari-console-wallet
          # EntryPoint:
          #   - sleep
          # Command:
          #   - infinity
          Command:
            - -p base_node.mining_enabled=false
            - --grpc-enabled
            - --grpc-address /ip4/0.0.0.0/tcp/44871
            - --non-interactive-mode
          Environment:
            - Name: MINOTARI_WALLET_PASSWORD
              Value: Ohngie7daeyu
            - Name: MINOTARI_WALLET_VIEW_PRIVATE_KEY
              Value: !Sub "{{resolve:secretsmanager:${ColdWalletSecret}:SecretString:PrivateViewKey}}"
            - Name: MINOTARI_WALLET_SPEND_KEY
              Value: !Sub "{{resolve:secretsmanager:${ColdWalletSecret}:SecretString:SpendKey}}"
          MountPoints:
            - ContainerPath: /var/tari/wallet
              SourceVolume: !Sub wallet-data-${OperationMode}
          PortMappings:
            - ContainerPort: 44871
              HostPort: 44871
              Protocol: tcp
        - Image: !Sub ${ProcessorImage}:${ProcessorImageTag}
          Name: wxtm-bridge-processor
          Links:
            - minotari-console-wallet
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: wxtm-bridge-processor
          Environment:
            - Name: ENVIRONMENT
              Value: !Ref Environment
            - Name: MINOTARI_WALLET_HOST
              Value: minotari-console-wallet
            - Name: WXTM_BRIDGE_BACKEND_URL
              Value: !Ref BackendUrl
            - Name: MINT_LOW_SAFE_ADDRESS
              Value: !Ref MintLowSafeAddress
            - Name: MINT_HIGH_SAFE_ADDRESS
              Value: !Ref MintHighSafeAddress
            - Name: MULTI_SEND_SAFE_ADDRESS
              Value: !Ref MultiSendSafeAddress
            - Name: WXTM_ADDRESS
              Value: !Ref WxtmAddress
            - Name: WXTM_CONTROLLER_ADDRESS
              Value: !Ref WxtmControllerAddress
            - Name: KMS_KEY_ID
              Value: !Ref KmsKeyId
            - Name: ETH_RPC_URL
              Value: !Ref EthRpcUrl
            - Name: OPERATION_MODE
              Value: !Ref OperationMode
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ERRORS_TOPIC_ARN
              Value: !Ref ErrorsTopic
            - Name: M2M_AUTH_TOKEN
              Value: !Sub "{{resolve:secretsmanager:${M2MTokenSecret}:SecretString:token}}"
            - Name: SENTRY_DSN
              Value: !Ref SentryDsn

      Volumes:
        - Name: !Sub wallet-data-${OperationMode}
          Host:
            SourcePath: /home/ec2-user/wallet-data
  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref AWS::StackName
      TaskDefinition: !Ref TaskDefinition
      Cluster: !Ref ECSCluster
      SchedulingStrategy: DAEMON
