Transform: AWS::Serverless-2016-10-31
Parameters:
  Environment:
    Type: String
  VpcId:
    Type: String
  PublicSubnets:
    Type: String
  PrivateSubnetCidrBlockA:
    Type: String
  PrivateSubnetCidrBlockB:
    Type: String
  PrivateSubnetCidrBlockC:
    Type: String
  CidrIp:
    Type: String
  CertificateArn:
    Type: String
  CloudfrontCertificateArn:
    Type: String
  HostedZoneId:
    Type: String
  StaticCloudFrontHostedZoneId:
    Type: String
  Domain:
    Type: String
  DBName:
    Type: String
  DBInstanceClass:
    Type: String
  DBAllocatedStorage:
    Type: Number
  Auth0Domain:
    Type: String
  Auth0Audience:
    Type: String
  SubgraphSheduleValue:
    Type: Number
  SubgraphSheduleUnit:
    Type: String
  SubgraphUrl:
    Type: String
  ColdWalletSecret:
    Type: String
  M2MTokenSecret:
    Type: String
  BastionKeyName:
    Type: String
    Default: ""
  TransactionTimeoutScheduleValue:
    Type: Number
  TransactionTimeoutScheduleUnit:
    Type: String
  SlackWebhookSecret:
    Type: String
  SentryDsn:
    Type: AWS::SSM::Parameter::Value<String>

Conditions:
  ShouldRunBastion: !Not [!Equals [!Ref BastionKeyName, ""]]
  ShouldAddLambdaAtEdge: !Equals [!Ref Environment, "development"]
  ShouldCreateMultisigInfrastructure: !Equals [!Ref Environment, "development"]

Resources:
  PrivateSubnets:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./private-subnets.yml
      Parameters:
        Environment: !Ref Environment
        VpcId: !Ref VpcId
        PublicSubnet: !Select [0, !Split [",", !Ref PublicSubnets]]
        PrivateSubnetCidrBlockA: !Ref PrivateSubnetCidrBlockA
        PrivateSubnetCidrBlockB: !Ref PrivateSubnetCidrBlockB
        PrivateSubnetCidrBlockC: !Ref PrivateSubnetCidrBlockC
        CidrIp: !Ref CidrIp

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group in which Lambdas are executed
      VpcId: !Ref VpcId

  WXTMBridgeDatabase:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./postgres.yml
      Parameters:
        Environment: !Ref Environment
        DBInstanceClass: !Ref DBInstanceClass
        DBAllocatedStorage: !Ref DBAllocatedStorage
        DBName: !Ref DBName
        VpcId: !Ref VpcId
        Subnets: !GetAtt PrivateSubnets.Outputs.PrivateSubnets
        AccessSecurityGroupId: !Ref LambdaSecurityGroup

  Bastion:
    Type: AWS::Serverless::Application
    Condition: ShouldRunBastion
    Properties:
      Location: ./bastion.yml
      Parameters:
        VpcId: !Ref VpcId
        PublicSubnet: !Select [0, !Split [",", !Ref PublicSubnets]]
        SecurityGroup: !Ref LambdaSecurityGroup

  WXTMBridgeService:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./wxtm-bridge.yml
      Parameters:
        Environment: !Ref Environment
        HostedZoneId: !Ref HostedZoneId
        Domain: !Ref Domain
        CertificateArn: !Ref CertificateArn
        DbHost: !GetAtt WXTMBridgeDatabase.Outputs.PostgresEndpointAddress
        DbSecret: !GetAtt WXTMBridgeDatabase.Outputs.PostgresSecrets
        DbName: !GetAtt WXTMBridgeDatabase.Outputs.DBName
        AccessSecurityGroupId: !Ref LambdaSecurityGroup
        Subnets: !GetAtt PrivateSubnets.Outputs.PrivateSubnets
        Auth0Domain: !Ref Auth0Domain
        Auth0Audience: !Ref Auth0Audience
        SubgraphSheduleValue: !Ref SubgraphSheduleValue
        SubgraphSheduleUnit: !Ref SubgraphSheduleUnit
        SubgraphUrl: !Ref SubgraphUrl
        ColdWalletSecret: !Ref ColdWalletSecret
        M2MTokenSecret: !Ref M2MTokenSecret
        TransactionTimeoutScheduleValue: !Ref TransactionTimeoutScheduleValue
        TransactionTimeoutScheduleUnit: !Ref TransactionTimeoutScheduleUnit
        SlackWebhookSecret: !Ref SlackWebhookSecret
        SentryDsn: !Ref SentryDsn

  Functions:
    Type: AWS::Serverless::Application
    Condition: ShouldAddLambdaAtEdge
    Properties:
      Location: ./functions.yml

  AdminPanel:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./frontend.yml
      Parameters:
        DomainName: !Sub admin.${Domain}
        CertificateArn: !Ref CloudfrontCertificateArn
        HostedZoneId: !Ref HostedZoneId
        StaticCloudFrontHostedZoneId: !Ref StaticCloudFrontHostedZoneId
        RestrictAndRedirectFunctionArn:
          !If [
            ShouldAddLambdaAtEdge,
            !GetAtt Functions.Outputs.RestrictAndRedirectFunctionArn,
            "",
          ]

  MultisigInfrastructure:
    Type: AWS::Serverless::Application
    Condition: ShouldCreateMultisigInfrastructure
    Properties:
      Location: ./multisig-infrastructure.yml
      Parameters:
        Environment: !Ref Environment
        LambdaSecurityGroupId: !Ref LambdaSecurityGroup
        PrivateSubnetsIds: !GetAtt PrivateSubnets.Outputs.PrivateSubnets
        DbSecretArn: !GetAtt WXTMBridgeDatabase.Outputs.PostgresSecrets
        DbHost: !GetAtt WXTMBridgeDatabase.Outputs.PostgresEndpointAddress
